<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  UCF COURSE DEVELOPMENT AND WEB SERVICES
//  Copyright 2009 UCF Course Development and Web Services
//  All Rights Reserved.
//
//  NOTICE: Course Development and Webservices prohibits the use of the
//  following code without explicit permission.  Permission can be obtained
//  from the New Media team at <newmedia@mail.ucf.edu>.
//
////////////////////////////////////////////////////////////////////////////////
-->
<!--previously included 'xmlns="creators.*"' which was preventing compilation -->
<materia:CreatorBase xmlns:mx="http://www.adobe.com/2006/mxml"
					 xmlns:components="materia.components.*"
                     xmlns:materia="materia.*"
                     xmlns:qaGrid="materia.components.questionAnswerDataGrid.*" xmlns:local="*"
                     xmlns:help="materia.help.*"
                     width="100%" height="100%" backgroundColor="#3B3E40"
                     backgroundAlpha="1.0"
                     backgroundSize="100%">
	<mx:Style>
		.crosswordWhiteText, .crosswordLabel, .crosswordText
		{
			color:#ffffff;
		}
		.instructionBox
		{
			backgroundColor:#F3F2BB;
			borderStyle:solid;
			borderColor:#F3F2BB;
			drop-shadow-enabled: true;
			corner-radius: 2px;
			font-size: 11pt;
			padding-top: 5;
			padding-bottom: 5;
			padding-left: 5;
			padding-right: 5;
		}
		.smallInstructionText
		{
			font-size:10;
			color:#000000;
		}
	</mx:Style>
<mx:Script>
<![CDATA[
	import flash.utils.setTimeout;
	import materia.CreatorEvents;
	import materia.components.questionAnswerDataGrid.TextInputObject;
	import materia.questionStorage.Question;
	import materia.questionStorage.QuestionGroup;
	import materia.questionStorage.QuestionSet;
	import mx.binding.utils.BindingUtils;
	import mx.collections.ArrayCollection;
	import mx.collections.ListCollectionView;
	import mx.controls.Alert;
	import mx.controls.dataGridClasses.DataGridColumn;
	import mx.events.CollectionEvent;
	import mx.events.CollectionEventKind;
	import mx.events.DataGridEvent;
	import mx.events.FlexEvent;
	import mx.events.ListEvent;
	import mx.events.ResizeEvent;
	import mx.graphics.ImageSnapshot;
	import nm.util.ObjPeek;
	//--------------------------------------------------------------------------
	//
	//  Variables
	//
	//--------------------------------------------------------------------------
	[Bindable]
	/**
	 *	 Holds the word data that's used across the creator
	 */
	private var myData:ArrayCollection = new ArrayCollection();
	private var myPreviousData:ArrayCollection = new ArrayCollection();
	/**
	 *	 Keep track if the word list has changed. If wordsHaveChanged == true, the puzzle will re-generate to use the new words.
	 */
	private var wordsHaveChanged:Boolean = true;
	[Bindable]
	/**
	 *	Storage of puzzle history
	 */
	private var puzzleHistory:ArrayCollection = new ArrayCollection;
	[Bindable]
	protected var _wordsUsedLabelText:String = "";
	
	/**
	 * Override the base question type for the qaDataGrid
	 **/
	QUESTION_TYPE = 'CrosswordQuestion';
	
	//--------------------------------------------------------------------------
	//
	//  Overrides
	//
	//--------------------------------------------------------------------------
	public override function init():void
	{
		super.init();
		instanceTitle = "New Crossword Widget";
		restrict = "^\u0001-\u0009\u000B-\u001F"; //Also excluding tab
		multilineFields = false;
		updateButtons();
		myData.addEventListener(CollectionEvent.COLLECTION_CHANGE, wordListChanged, false, 0, true);
		addEventListener("CROSSWORD_BUILT", crosswordBuilt, false, 0, true);
		//Manage Datagrid
		wordList.addEventListener(Event.CHANGE, wordChanged, false, 0, true);
		wordList.answerHeaderLabel = "Word to Guess (Answer)";
		wordList.answerColumn.characterLimit = 35
		wordList.questionHeaderLabel = "Clue (Question)";
		wordList.addOptionColumn('Hint (optional)', 'hint', 3, true, 0, 'Enter a hint here (optional)');
		wordList.equalizeColumnWidths();
		enablePuzzle();
	}
	public override function initNewWidget(widget:Object, baseUrl:String):void
	{
		super.initNewWidget(widget, baseUrl);
		wordList.addQuestion(null, false);
	}
	protected override function initExistingWidget(title:String, widget:Object, qset:Object, version:String, baseUrl:String):void
	{
		super.initExistingWidget(title, widget, qset, version, baseUrl);
		var q:Array = questionSet.getQuestions();
		for (var i:int = 0; i < q.length; i++)
		{
			var question:Question = q[i];
			var d:Boolean = question.getOption('dir') == 'true';
			var posSet:Boolean = question.getOption('posSet') == 'true';
			addQuestion(q[i].answers[0].text, q[i].questions[0].text, q[i].getOption("hint"), q[i].getOption("x"), q[i].getOption("y"), d, q[i].id, posSet);
		}
		wordsHaveChanged = false; // because we are using the saved puzzle configuration
		if (q.length == 0)
		{
			addQuestion();
		}
		var myWords:Array = new Array();
		//Copy the array
		for(var j:int = 0; j < q.length; j++)
		{
			myWords.push(q[j]);
		}
		myPuzzle.loadPreBuiltPuzzle();
		myPuzzle.crosswordPreview.drawPuzzle(myWords);
		this.dispatchEvent(new Event(CreatorEvents.ENABLE_PUBLISH, true));
	}
	public override function onSaveClicked(mode:String = 'save'):void
	{
		// save everything if it checks out
		if(checkQSetErrors() && checkCrosswordErrors())
		{
			ExternalInterface.call("__materia_flash_save", instanceTitle, generateQSet(), questionSetVersion);
		}
	}
	/**
	 * Check and alert any QSet errors
	 * ex: invalid question or answers
	 * Returns false if errors present, true otherwise
	 **/
	public function checkQSetErrors():Boolean
	{
		var error:Object;
		// Errors from individual questions
		var qsetErrors:Array = getQSetErrors();
		// No QSet errors
		if(!qsetErrors)
		{
			return true;
		}
		// Alert first error
		error = qsetErrors.shift().question.options;
		Alert.show(error.errorMessage, error.errorTitle);
		return false;
	}
	/**
	 * Check and alert any crossword errors ex: puzzle is not generated
	 * Not called before puzzle is generated (should not alert missing puzzle when trying to generate the puzzle!)
	 * Returns false if found errors, true otherwise
	 **/
	public function checkCrosswordErrors():Boolean
	{
		// Crossword errors (ex. puzzle not generated)
		var error:Object = getCrosswordError();
		// No errors
		if(!error)
		{
			return true;
		}
		// Alert error
		Alert.show(error.errorMessage, error.errorTitle);
		return false;
	}
	/**
	 * Gets QSet related errors
	 * ex: Invalid question or answer
	 **/
	public function getQSetErrors():Array
	{
		// Object is undefined, returns false if no errors
		var errors:Array;
		// Ignore last data provider (placeholder)
		for(var i:int = 0; i < wordList.dataProvider.length-1; i++)
		{
			// DataProvider is an array of TextInputObjects
			if(wordList.dataProvider[i].hasErrors())
			{
				if(errors == null) 
				{
					errors = new Array();	
				}
				errors.push(wordList.dataProvider[i]);
			}
		}
		return errors;
	}
	/**
	 * Gets Non-QSet related errors
	 * ex: Crossword not generated 
	 **/
	public function getCrosswordError():Object
	{
		// Object is undefined, returns false if no errors
		var error:Object;	
		if(!myPuzzle.crosswordPreview.isEmpty())
		{
			error = new Object();
			error.errorMessage = "Your crossword puzzle has not yet been generated.";
			error.errorTitle = "Missing Puzzle";
		}
		return error;
	}

	private function disablePuzzle():void
	{
		crosswordBlock.visible = true;
		btnGenerate.enabled = false;
		crosswordBlockText.visible = true;
	}
	private function enablePuzzle():void
	{
		crosswordBlock.visible = false;
		btnGenerate.enabled = true;
		crosswordBlockText.visible = false;
	}

	/**
	 *	 Called once for each question that is imported
	 */
	public override function addImportedQuestion(question:Question):Question
	{
		var q:Question = super.addImportedQuestion(question);
		addQuestion(q.correctAnswer, q.question, q.hint, 0, 0, false, q.id);
		return q;
	}
	protected function generateQSet():Object
	{
		var qSet:QuestionSet = new QuestionSet(instanceTitle);
		var qgroup:QuestionGroup = wordList.generateQGroup('');
		qSet.addChild(qgroup);
		if (freeWordsNumStepper != null)
		{
			qSet.addOption("freeWords", freeWordsNumStepper.value);
		}
		if (hintsNumStepper != null)
		{
			qSet.addOption("hintPenalty", hintsNumStepper.value);
		}
		validateQIDs(qSet);
		return qSet.convertToObject();
	}
	//--------------------------------------------------------------------------
	//
	//  Class Methods
	//
	//--------------------------------------------------------------------------
	/**
	 *	 Will handle all the updating of buttons based on avaiable data.
	 */
	private function updateButtons():void
	{
		this.dispatchEvent(new Event(CreatorEvents.DISABLE_PUBLISH, true));
		this.dispatchEvent(new Event(CreatorEvents.ENABLE_IMPORT, true));
	}
	private function wordChanged(e:Event = null):void
	{
		wordsHaveChanged = true;
		this.dispatchEvent(new Event(CreatorEvents.DISABLE_PUBLISH, true));
	}
	private function wordListChanged(e:CollectionEvent):void
	{
		if (e.kind != CollectionEventKind.REPLACE && e.kind != CollectionEventKind.REFRESH)
		{
			wordsHaveChanged = true;
			this.dispatchEvent(new Event(CreatorEvents.DISABLE_PUBLISH, true));
		}
	}
	private function initQuestionDataGrid():void
	{
		if (myData == null)
		{
			myData = new ArrayCollection();
			addQuestion();
		}
		wordList.dataProvider = myData;
		myPreviousData = myData
	}
	/**
	 *	Helper for adding a question
	 *
	 *	 @param theWord The word to add
	 *	 @param theClue The clue for the word. This is what is shown to have user guess word.
	 *	 @param theHint The hint for the word. This is what is shown when user requests a hint.
	 *	 @param theX ???
	 *	 @param theY ???
	 *	 @param id The id of the question. Will only be given if we're opening an existing game for editing.
	 */
	private function addQuestion(theWord:String = "", theClue:String = "", theHint:String = "", theX:Number = 0, theY:Number = 0, theDir:Boolean = false, id:Number = 0, posSet:Boolean = true):void
	{
		//Prepare the new question to be added
		var options:Object = {hint: theHint, x: theX, y: theY, dir: theDir, posSet: posSet };
		var newQuestion:Question = new CrosswordQuestion('QA', options, id, theClue, theWord);
		//Stealfocus to perform updates & error checking
		wordList.addQuestion(newQuestion, true);
		//Scroll to last item (the newly added one) in the list
		wordList.scrollToIndex(myData.length - 1);
		wordsHaveChanged = true;
	}
	/**
	 *	Will regnerate the puzzle.
	 *	An emtpy qset clears the current puzzle
	 */
	private function generatePuzzle():void
	{
		// Generate Puzzle if no QSetErrors
		if(checkQSetErrors())
		{
			this.dispatchEvent(new Event(CreatorEvents.ENABLE_PUBLISH, true));
			//if words were changed, rebuild the puzzle when switching back over.
			if (wordsHaveChanged)
			{
				if (myPuzzle != null)
				{
					myPuzzle.remake();
					setWordsUsedText();
				}
				wordsHaveChanged = false;
			}
			else
			{
				myPuzzle.generate();
				setWordsUsedText();
			}
		}
	}
	protected function setWordsUsedText():void
	{
		var numWordsTotal:int = myData.length - 1; // 1 is the thing that adds at the end of the questions datagrid
		var numWordsUsed:int = myPuzzle.numWordsUsed;
		if (numWordsTotal == numWordsUsed)
		{
			_wordsUsedLabelText = "<b>All</b> words used.";
		}
		else
		{
			_wordsUsedLabelText = "<b><font size=\"15\">" + numWordsUsed + "</font></b> out of <b><font size=\"16\">" + numWordsTotal + "</font></b> words used.";
		}
	}
	/**
	 * called everytime a new puzzle has completed creation
	 */
	private function crosswordBuilt(e:Event):void
	{
		btnGenerate.enabled = true;
	}
	/**
	 *	Load up the selected history item
	 */
	private function clickPuzzleHistoryTL(e:ListEvent):void
	{
		var qSetFromHistory:Array = myPuzzle.puzzleHistory[e.columnIndex].qset;
		var qSetCopy:Array = [];
		for (var i:int = 0; i < qSetFromHistory.length; i++)
		{
			qSetCopy.push(qSetFromHistory[i].clone());
		}
		myPuzzle.redrawFromHistory(qSetCopy);
	}
	]]>
</mx:Script>
<mx:VBox top="10" bottom="10" left="10" right="10">
	<mx:VBox width="100%">
		<mx:Canvas width="100%" height="50">
			<mx:HBox left="16" right="16" height="40" verticalAlign="middle" verticalCenter="0">
				<mx:Label text="Widget Title: " styleName="sectionLabel" fontSize="16"/>
				<mx:TextInput id="gameTitle" height="40" width="100%" text="{instanceTitle}" change="{instanceTitle=gameTitle.text;}" fontSize="21" focusIn="{gameTitle.setSelection(0,gameTitle.text.length); }"/>
			</mx:HBox>
		</mx:Canvas>
	</mx:VBox>
	<mx:VBox width="100%" height="100%">
	<mx:Canvas  width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" styleName="creatorSectionMajor">
	<mx:Canvas styleName="creatorSectionMajor" verticalScrollPolicy="off" horizontalScrollPolicy="off" left="10" bottom="10" right="10" top="10">
		<mx:HBox left="0" top="0" bottom="0" right="0">
			<mx:Canvas id="questionsPage" height="100%" width="100%" styleName="creatorSectionMinor">
				<!--<mx:Canvas width="100%" height="38">
					<mx:HBox top="10" bottom="0" left="0" right="0">
					<mx:Canvas height="28">
						<mx:Label text="Word List:" color="0xffffff" fontSize="18" styleName="crosswordLabel" verticalCenter="0"/>
					</mx:Canvas>
					<mx:Canvas height="28">
						<mx:Label color="0xffffff"
							text="Enter the words for the puzzle into this data grid. When completed, click the Generate Puzzle button."
							styleName="crosswordWhiteText" fontStyle="normal" textAlign="center" horizontalCenter="0" verticalCenter="0"/>
					</mx:Canvas>
					</mx:HBox>
				</mx:Canvas>-->
				<mx:Canvas left="10" bottom="10" right="10" top="29">
					<qaGrid:QuestionAnswerDataGrid id="wordList" multilineFields="{multilineFields}" restrict="{restrict}" dataProvider="{myData}" showWordCount="false" characterLimit="180" top="5" right="5" bottom="5" left="5"/>
				</mx:Canvas>
				<mx:Label text="Word List:" styleName="sectionLabel" height="21" fontSize="16" fontWeight="normal" x="30" y="2"/>
				<help:HelpDot toolTip="Click in the textboxes to add clues, words, and optional hints to your crossword puzzle. " x="12" y="9"/>
			</mx:Canvas>
			<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" width="323" height="100%">
				<mx:Canvas width="100%" height="100%">
					<mx:HBox horizontalGap="10" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" top="0" left="0" right="0" horizontalAlign="center">
						<mx:VBox height="100%" width="100%" horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="off">
							<mx:Canvas id="canvasPuzzleDisplay" width="100%" height="394" borderStyle="solid" cornerRadius="5" borderThickness="0" styleName="creatorSectionMinor" horizontalScrollPolicy="off" verticalScrollPolicy="off">
								<mx:VBox left="0" right="0" bottom="0" top="10" horizontalAlign="center">
									<local:CrosswordDisplay scrollRect="{new Rectangle(0, 0, myPuzzle.width, myPuzzle.height)}" id="myPuzzle" source="{myData}" width="300" height="300" cornerRadius="8"/>
									<mx:Label htmlText="{_wordsUsedLabelText}" color="0xffffff" fontSize="14"/>
									<mx:Button label="Generate New Puzzle" height="41" width="240" click="{generatePuzzle();}" styleName="gameButtonSmall"
										fillAlphas="[1.0, 1.0, 1.0, 1.0]" id="btnGenerate" enabled="false"/>
								</mx:VBox>
								<mx:Canvas backgroundColor="#000000" top="0" bottom="0" left="0" right="0" cornerRadius="8" borderColor="#535353" backgroundAlpha="0.68" id="crosswordBlock" borderStyle="none" borderThickness="0" visible="false"  horizontalScrollPolicy="off" verticalScrollPolicy="off"></mx:Canvas>
								<mx:Text text="You must add at least one word to the word list before generating a puzzle."  verticalCenter="0" horizontalCenter="0" width="260" color="#FFFFFF" styleName="crosswordText" textAlign="center" height="52" fontSize="12" id="crosswordBlockText"  visible="false" />
							</mx:Canvas>
							<mx:Label text="Puzzle Options:" styleName="sectionLabel" height="21" fontSize="16" fontWeight="normal"/>
							<mx:Canvas width="297" height="2">
							</mx:Canvas>
							<mx:Canvas width="240" height="40" styleName="creatorSectionMinor" horizontalScrollPolicy="off" verticalScrollPolicy="off">
								<mx:HBox verticalAlign="middle" x="47" y="8" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<mx:Label text="Free Words:" styleName="wordSearchText"/>
									<mx:NumericStepper id="freeWordsNumStepper" minimum="0" maximum="{ (myData == null) ? 0:myData.length-1}"
										 value="0" left="111" top="158" width="50" styleName="numStepper"/>
								</mx:HBox>
								<help:HelpDot toolTip="Free Words are 'wildcards' that allow students to automatically complete a word within a crossword puzzle. " verticalCenter="0" left="12"/>
							</mx:Canvas>
							<mx:Canvas width="240" height="40" styleName="creatorSectionMinor" horizontalScrollPolicy="off" verticalScrollPolicy="off">
								<mx:HBox verticalAlign="middle" x="47" y="7" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<!--Adding a hint to a word provides additional information that can help the a puzzled student." />-->
									<mx:Label x="10" y="213" text="Hint Cost:" styleName="wordSearchText"/>
									<mx:Canvas width="10" height="26">
									</mx:Canvas>
									<mx:NumericStepper id="hintsNumStepper" minimum="0" maximum="100" value="50" left="111" top="215" width="50" styleName="numStepper"/>
									<mx:Label text="%" styleName="crosswordText" fontSize="12" fontWeight="normal"/>
								</mx:HBox>
								<help:HelpDot toolTip="When a hint is used, the Hint Cost reduces the word's score by the percent specified." left="12" verticalCenter="0"/>
							</mx:Canvas>
							<!--<mx:HorizontalList id="tileListPuzzleHistory" dataProvider="{myPuzzle.puzzleHistory}" itemRenderer="creators.crossword.historyRenderer" width="334" height="105" rowHeight="125" columnWidth="125" itemClick="clickPuzzleHistoryTL(event);" selectable="false"/>-->
						</mx:VBox>
					</mx:HBox>
				</mx:Canvas>
			</mx:VBox>
		</mx:HBox>
	</mx:Canvas>
	</mx:Canvas>
	</mx:VBox>
</mx:VBox>
</materia:CreatorBase>